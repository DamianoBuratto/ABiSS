#!/bin/bash


echo "
>>>>>>>>>>>>>>>>   gmx_mmpbsa   <<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>    Jicun Li    <<<<<<<<<<<<<<<<
>> 2019-09-19: push to gmxtool
>> 2019-11-03: fix bug for time stamp
>> 2019-11-06: apbs FILE.apbs &> FILE.out
               on ubuntu 18.04 may not work, then delete &
>> 2019-11-17: fix bug for c6, c12 of old version tpr
>> 2019-12-10: fix bug for OPLS force field
>> 2019-12-24: fix bug for small time step
>> Todo:       parallel APBS, focus
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"

step=1	# 从第几步开始运行 step number to run
		# 1. 预处理轨迹: 复合物完整化, 团簇化, 居中叠合, 然后生成pdb文件
		#    pre-processe trajectory, whole, cluster, center, fit, then generate pdb file
		# 2. 获取每个原子的电荷, 半径, LJ参数, 然后生成qrv文件
		#    abstract atomic parameters, charge, radius, C6/C12, then generate qrv file
		# 3. MM-PBSA计算: pdb->pqr, 输出apbs, 计算MM, APBS
		#    run MM-PBSA, pdb->pqr, apbs, then calculate MM, PB, SA

################################################################################
# 0. 设置运行环境, 计算参数
# 0. setting up environmets and parameters
################################################################################

GMXRCpath=/usr/local/gromacs/bin/GMXRC
apbs='/usr/local/bin/apbs'		# APBS(Linux)
trjconvOPT="-e 0"			# -skip 1000

trj=trjRUN1_all.xtc			# trajectory file
tpr=cicle1.tpr				# tpr file
ndx=index.ndx				# index file

com=complex				# index group name of complex
pro=receptor				# index group name of protein
lig=ligand				# index group name of ligand

pid=OUT					# prefix of the output files($$)

while [ $# -gt 0 ]
do
    case "$1" in
	-gsp)		shift; GMXRCpath=$1;;
	-ap)		shift; apbs=$1;;
	-trj)		shift; trj=$1;;
	-tpr)		shift; tpr=$1;;
	-ndx)		shift; ndx=$1;;
	-to)		shift; trjconvOPT=$1;;
	-com)		shift; com=$1;;
	-pro)		shift; pro=$1;;
	-lig)		shift; lig=$1;;
	-prefix)	shift; pid=$1;;
	*)		fatal 1 "ERROR: $1 is not a valid OPTION!\n";;
    esac
    shift
done


source $GMXRCpath

gmx='gmx'						# gmx
dump="$gmx dump"					# gmx dump
trjconv="$gmx trjconv $trjconvOPT"			# gmx trjconv
#trjconv="$gmx trjconv -skip 1000"
#apbs='c:/apbs1.5/bin/apbs.exe'				# APBS(Windows), USE "/", NOT "\"
export MCSH_HOME=/dev/null				# APBS io.mc


scr=_$pid.scr			# file to save the message from the screen
qrv=_$pid.qrv			# to save charge/radius/vdw parmeters

ff=AMBER			# force field(AMBER, OPLS, CHARMM)
radType=0			# radius of atoms (0:ff; 1:mBondi; 2:Bondi)
meshType=0			# mesh (0:global  1:local)
gridType=0			# grid (0:GMXPBSA 1:psize)

cfac=3				# Factor to expand mol-dim to get coarse grid dim
fadd=10				# Amount added to mol-dim to get fine grid dim (A)
df=.5				# The desired fine mesh spacing (A)


#(Polar)
PBEset='
  temp  300         # (gmxpbsa=293)
  pdie  2           # (gmxpbsa=2)
  sdie  80          # 78.54	(gmxpbsa=80)

  lpbe              # lpbe, npbe, smbpe (gmxpbsa=lpbe -> linearized)
  bcfl  mdh         # zero, sdh/mdh(single/multiple Debye-Huckel), focus, map 	(gmxpbsa=mdh)
  srfm  smol        # mol, smol, spl2/4 	(gmxpbsa=smol)
  chgm  spl4        # spl0/2/4 	(gmxpbsa=2)
  swin  0.3         # srfm=spl2/4 	(gmxpbsa=0.3)

  srad  1.4         # (gmxpbsa=1.4)
  sdens 10          # A^2, (srad=0)(srfm=spl2/4) (gmxpbsa=10)

  ion  1 0.15 0.95  # (gmxpbsa= 1 0.15 2)
  ion -1 0.15 1.81  # (gmxpbsa=-1 0.15 2)

  calcforce  no     # (gmxpbsa=no)
  calcenergy comps  # (gmxpbsa=total)' 

#(Apolar/Non-polar)
PBAset='
  temp  300  # (gmxpbsa=293)
  srfm  sacc # (gmxpbsa=sacc)
  swin  0.3  # (A) (gmxpbsa=0.3)

  # SASA
  srad  1.4    # (A) (gmxpbsa=1.4)
  gamma 1      # (kJ/mol-A^2) (gmxpbsa=0.0227)

  #gamma const 0.027     0        # 
  #gamma const 0.0226778 3.84928  # 

  press  0     # (kJ/mol-A^3) (gmxpbsa=0)
  bconc  0     # (A^3) (gmxpbsa=0)
  sdens 10     # (gmxpbsa=10.0)
  dpos  0.2    # (gmxpbsa=0.2)
  grid  0.1 0.1 0.1 # (gmxpbsa=0.1 0.1 0.1)

  # SAV
  #srad  1.29      # SAV(A)
  #press 0.234304  # (kJ/mol-A^3)

  # WCA
  #srad   1.25           # (A)
  #sdens  200            # (1/A)
  #dpos   0.05           # 
  #bconc  0.033428       # (A^3)
  #grid   0.45 0.45 0.45 # (A)

  calcforce no           # (gmxpbsa=total)
  calcenergy total'

if [[ $step -le 1 ]]; then
################################################################################
echo "
#    1. pre-processe trajectory, whole, cluster, center, fit, then generate pdb file
#    feel free to use -b -e -dt -skip
"
################################################################################
trjwho=$pid~who; trjcls=$pid~cls
echo $com                   | ${trjconv/-*/} -f $trj    -s $tpr -n $ndx -o $trjwho.xtc &>$scr -pbc whole
echo -e "$com\n$com"        | ${trjconv/-*/} -f $trjwho -s $tpr -n $ndx -o $trjcls.xtc &>>$scr -pbc cluster
echo -e "$com\n$com\n$com"  | $trjconv -f $trjcls -s $tpr -n $ndx -o _$pid.pdb  &>>$scr -center -fit rot+trans
rm -f $trjwho.xtc $trjcls.xtc

fi; if [[ $step -le 2 ]]; then
################################################################################
echo "
#    2. abstract (from the tpr) atomic parameters, charge, radius, C6/C12, then generate qrv file
#    feel free to change radius with radType
#    radType=0: radius from C6/C12, or 1.2 if either C6 or C12 is zero (from teh ff)
#    radType=1: mBondi
#    radType=2: Bondi
"
################################################################################
$dump -quiet -s $tpr 2>>$scr \
| awk >$qrv -v ndx=$ndx -v pro=$pro -v lig=$lig -v radType=$radType '
	BEGIN { RS="["
		while(getline < ndx) { gsub(/\s/,"", $1)	# read the ndx file line by line
			if($1==pro)    for(i=3; i<=NF; i++) ndxPro[$i+0]++
			if($1==lig)    for(i=3; i<=NF; i++) ndxLig[$i+0]++
			if($1==pro"]") for(i=2; i<=NF; i++) ndxPro[$i+0]++
			if($1==lig"]") for(i=2; i<=NF; i++) ndxLig[$i+0]++
		}
		RS="\r?\n"
	}

	/#molblock/  { Ntyp=$3 }
	/moltype.+=/ { Imol=$3; getline; Nmol[Imol]=$3 }
	/ffparams:/ {
		getline Atyp; sub(/.+=/, "", Atyp); Atyp += 0
		getline
		for(i=0; i<Atyp*Atyp; i++) {
			getline
			idx=int(i/Atyp)
			if(idx==i%Atyp) {
				sigma[idx]=0; epsilon[idx]=0
				Rad[idx]=1.2 # (A), (H)
				C6 =$0; sub(".*c6=",  "", C6);  sub(",.*", "", C6);
				C12=$0; sub(".*c12=", "", C12); sub(",.*", "", C12);
				if(C6*C12!=0) {
					sigma[idx]=10*(C12/C6)^(1./6) # A
					epsilon[idx]=C6^2/(4*C12)
					Rad[idx]=.5*sigma[idx]        # sigma
				}
			}
		}
	}

	/moltype.+\(/ { Imol=$0; gsub(/[^0-9]/,"",Imol)
		getline txt; sub(/.*=/,"",txt); Name[Imol]=txt
		getline; getline txt;       gsub(/[^0-9]/,"",txt); Natm[Imol]=txt+0
		for(i=0; i<Natm[Imol]; i++) {
			getline; txt=$0; idx=$3; resID[Imol, i]=$(NF-2)+1
			sub(/.+q=/, "", txt); sub(/,.+/,  "", txt); Qatm[Imol, i]=txt
			sub(",", "", idx);    idx += 0;
			Ratm[Imol, i]=Rad[idx]
			Satm[Imol, i]=sigma[idx]
			Eatm[Imol, i]=epsilon[idx]
		}
		getline
		for(i=0; i<Natm[Imol]; i++) {
			getline txt
			sub(/.+=./, "", txt); sub(/..$/, "", txt)
			Tatm[Imol, i]=txt
		}
	}

	/residue\[/ { nres++
		sub(/.*=\"/,"",$0); sub(/\".*/,"",$0);
		resName[nres]=sprintf("%05d%s", nres, $0)
	}

	END {
		Ntot=0; Nidx=0
		for(i=0; i<Ntyp; i++) {
			for(n=0; n<Nmol[i]; n++) {
				for(j=0; j<Natm[i]; j++) {
					Ntot++
					if(Ntot in ndxPro || Ntot in ndxLig) {
						Nidx++
						####### DB
						chain=Name[i]; sub(/.*chain_/,"",chain); sub(/\"/,"",chain); # print chain > "chain.out"
						#######
						if(radType==0) radi=Ratm[i, j]
						if(radType >0) radi=getRadi(Tatm[i, j], radType)
						printf "%6d %9.5f %9.6f %9.6f %9.6f %6d %s %s %-6s  ",  \
						Nidx, Qatm[i,j], radi, Satm[i,j], Eatm[i,j], \
						Ntot, n+1"."Name[i]"-"j+1, \
						resName[resID[i,j]]"-"chain, Tatm[i, j]
						if(Ntot in ndxPro) print "Pro"
						if(Ntot in ndxLig) print "Lig"
					}
				}
			}
		}
	}

	function getRadi(tag, radType) {
		radBondi["O" ]= 1.50; if(radType==2) radBondi["O" ]= 1.52
		radBondi["S" ]= 1.80; if(radType==2) radBondi["S" ]= 1.83
		radBondi["P" ]= 1.85; if(radType==2) radBondi["P" ]= 1.80
		radBondi["I" ]= 1.98; if(radType==2) radBondi["I" ]= 2.06
		radBondi["BR"]= 1.85; if(radType==2) radBondi["BR"]= 1.92
		radBondi["N" ]= 1.55
		radBondi["F" ]= 1.47
		radBondi["CL"]= 1.77

		radBondi["C" ]= 1.70; radBondi["H" ]= 1.20
		radBondi["C*"]= 1.77; radBondi["H4"]= 1.00
		radBondi["CA"]= 1.77; radBondi["H5"]= 1.00
		radBondi["CB"]= 1.77; radBondi["HA"]= 1.00
		radBondi["CC"]= 1.77; radBondi["HC"]= 1.30
		radBondi["CD"]= 1.77; radBondi["HN"]= 1.30
		radBondi["CN"]= 1.77; radBondi["HP"]= 1.30
		radBondi["CR"]= 1.77; radBondi["HO"]= 0.80
		radBondi["CV"]= 1.77; radBondi["HS"]= 0.80
		radBondi["CW"]= 1.77;

		tag=toupper(tag)
		if(length(tag)>=2) {
			if(!radBondi[substr(tag,1,2)]) return radBondi[substr(tag,1,1)]
			else return radBondi[substr(tag,1,2)]
		}
		return radBondi[tag]
	}
'

fi; if [[ $step -le 3 ]]; then
################################################################################
echo "
#    3. run MM-PBSA, pdb->pqr, apbs, then calculate MM, PB, SA
"
################################################################################
dt=$(awk '/t=/{n++;sub(/.*t=/,"");sub(/step=.*/,"");t[n]=$0;if(n==2){print t[n]-t[1];exit}}' _$pid.pdb)
# gawk is going through the pdb file generated at step 1
gawk -v pid=_$pid  -v qrv=$qrv -v apbs="$apbs" \
	-v ff=$ff     -v PBEset="$PBEset" -v PBAset="$PBAset" \
	-v meshType=$meshType -v gridType=$gridType -v gmem=$gmem  \
	-v fadd=$fadd -v cfac=$cfac -v df=$df -v dt="$dt" -v RS="\r?\n" '
	BEGIN {
		while(getline < qrv) {		# read the qrv file (generated at step 2)
			Qatm[$1]=$2; Ratm[$1]=$3;
			Satm[$1]=$4; Eatm[$1]=$5
			if($NF=="Pro") { Npro++; if(Npro==1) Ipro=$1		# NF is the last column of the row
				ndxPro[$1]++; resPro[Npro]="P~"$(NF-2)
			}
			if($NF=="Lig") { Nlig++; if(Nlig==1) Ilig=$1
				ndxLig[$1]++; resLig[Nlig]="L~"$(NF-2)
			}
		}
		close(qrv)
		Ncom=Npro+Nlig

		PBEset0=PBEset; sub(/sdie +[0-9]+/, "sdie  1", PBEset0)  # sub(r, s [, t]) For the first substring matching the regular expression r in the string t, substitute the string s. If t is not supplied, use $0.

		txt=PBEset; sub(/.*pdie +/, "", txt); 		# get rid of pdie (and spaces after it) and everything before
		sub(/\n.*/, "", txt); split(txt, arr); 		# get rid of everything after the newline
		pdie=arr[1]

		txt=PBAset; sub(/.*#gamma +con[a-zA-Z]+/, "", txt);
		sub(/\n.*/, "", txt); split(txt, arr); 
		gamma=arr[1]; const=arr[2]; 

		MAXPOS=1E9
		minX= MAXPOS; maxX=-MAXPOS;
		minY= MAXPOS; maxY=-MAXPOS;
		minZ= MAXPOS; maxZ=-MAXPOS

		fmt=sprintf(".9f",dt/1E3)			# format for the frame time
		sub(/0*$/,"",fmt);sub(/.*\./,"",fmt)
		fmt="~%."length(fmt)"fns"; print "fmt:"fmt
	}

	/REMARK/ {next}
	/TITLE/ {Fout=FILENAME
		txt=$0; sub(/.*t= */,"",txt); sub(/ .*/,"",txt)       # get the frame time
		txt=sprintf(fmt, txt/1E3);
		sub(".pdb", txt, Fout)
		Nfrm++; n=0
		Fname[Nfrm]=Fout

		minXpro[Nfrm]= MAXPOS; minXlig[Nfrm]= MAXPOS;
		minYpro[Nfrm]= MAXPOS; minYlig[Nfrm]= MAXPOS;
		minZpro[Nfrm]= MAXPOS; minZlig[Nfrm]= MAXPOS

		maxXpro[Nfrm]=-MAXPOS; maxXlig[Nfrm]=-MAXPOS
		maxYpro[Nfrm]=-MAXPOS; maxYlig[Nfrm]=-MAXPOS
		maxZpro[Nfrm]=-MAXPOS; maxZlig[Nfrm]=-MAXPOS
	}
	/^ATOM/ {
		# Get all the information from the from the atom and print a pqr file
		ATOM=substr($0,1,6)				# substr(s, i [, n]) Return the at most n-character substring of s starting at i. If n is omitted, use the rest of s.
		INDX=substr($0,7,5)+0
		NAME=substr($0,13,4)
		RES =substr($0,18,3)
		CHN =substr($0,22,1); if(CHN==" ") { CHN="A" }
		NUM =substr($0,23,4)
		X   =substr($0,31,8); X += 0
		Y   =substr($0,39,8); Y += 0
		Z   =substr($0,47,8); Z += 0
		r=Ratm[INDX]

		txt=sprintf("%-6s%5d %-4s %3s %s%4d    %8.3f %8.3f %8.3f %12.6f %12.6f", \
			ATOM, INDX, NAME, RES, CHN, NUM, X, Y, Z, Qatm[INDX], r)

		print txt > Fout"_com.pqr"
		if(INDX in ndxPro) {
			print txt > Fout"_pro.pqr"
			minXpro[Nfrm]=min(minXpro[Nfrm], X-r); maxXpro[Nfrm]=max(maxXpro[Nfrm], X+r)
			minYpro[Nfrm]=min(minYpro[Nfrm], Y-r); maxYpro[Nfrm]=max(maxYpro[Nfrm], Y+r)
			minZpro[Nfrm]=min(minZpro[Nfrm], Z-r); maxZpro[Nfrm]=max(maxZpro[Nfrm], Z+r)
		} else
		if(INDX in ndxLig) {
			print txt > Fout"_lig.pqr"
			minXlig[Nfrm]=min(minXlig[Nfrm], X-r); maxXlig[Nfrm]=max(maxXlig[Nfrm], X+r)
			minYlig[Nfrm]=min(minYlig[Nfrm], Y-r); maxYlig[Nfrm]=max(maxYlig[Nfrm], Y+r)
			minZlig[Nfrm]=min(minZlig[Nfrm], Z-r); maxZlig[Nfrm]=max(maxZlig[Nfrm], Z+r)
		}

		minXcom[Nfrm]=min(minXpro[Nfrm], minXlig[Nfrm]); maxXcom[Nfrm]=max(maxXpro[Nfrm], maxXlig[Nfrm])
		minYcom[Nfrm]=min(minYpro[Nfrm], minYlig[Nfrm]); maxYcom[Nfrm]=max(maxYpro[Nfrm], maxYlig[Nfrm])
		minZcom[Nfrm]=min(minZpro[Nfrm], minZlig[Nfrm]); maxZcom[Nfrm]=max(maxZpro[Nfrm], maxZlig[Nfrm])

		minX=min(minX, minXcom[Nfrm]); maxX=max(maxX, maxXcom[Nfrm])
		minY=min(minY, minYcom[Nfrm]); maxY=max(maxY, maxYcom[Nfrm])
		minZ=min(minZ, minZcom[Nfrm]); maxZ=max(maxZ, maxZcom[Nfrm])

		next
	}
	
	END{
		print "minX:"minX" minY:"minY" minZ:"minZ" maxX:"maxX" maxY:"maxY" maxZ:"maxZ
		print "minXcom[1]:"minXcom[1]" minYcom:"minYcom[1]" minZcom:"minZcom[1]" maxXcom:"maxXcom[1]" maxYcom:"maxYcom[1]" maxZcom:"maxZcom[1]
		print "minXpro[1]:"minXpro[1]" minYpro:"minYpro[1]" minZpro:"minZpro[1]" maxXpro:"maxXpro[1]" maxYpro:"maxYpro[1]" maxZpro:"maxZpro[1]
		print "minXlig[1]:"minXlig[1]" minYlig:"minYlig[1]" minZlig:"minZlig[1]" maxXlig:"maxXlig[1]" maxYlig:"maxYlig[1]" maxZlig:"maxZlig[1]
		
		kJcou=1389.35457520287

		for(i=1; i<=Npro; i++) dE[resPro[i]]=0		# resPro[i] array with the name of all the residue of the Protein
		for(i=1; i<=Nlig; i++) dE[resLig[i]]=0		# resPro[i] array with the name of all the residue of the Ligand
		Nres=asorti(dE, Tres)
		print "Nres:"Nres" Ncom:"Ncom

		txt="   #Frame   "
		for(i=1; i<=Nres; i++) {
			ii=Tres[i]; sub(/~0+/, "~", ii)
			txt = txt""sprintf("%12s", ii)
		}
		print txt > pid"~resMM.dat"
		print txt > pid"~resPBSA.dat"
		print txt > pid"~resMM_COU.dat"
		print txt > pid"~resMM_VDW.dat"
		print txt > pid"~resPBSA_PB.dat"
		print txt > pid"~resPBSA_SA.dat"
		print txt > pid"~res_MMPBSA.dat"

		print "   #Frame      Binding    MM        PB        SA     "\
			 "|   COU       VDW     |       PBcom        PBpro        PBlig  "\
			 "|    SAcom     SApro     SAlig" > pid"~MMPBSA.dat"

		for(fr=1; fr<=Nfrm; fr++) {
			Fout=Fname[fr]
			print "running for Frame "fr": "Fout

			#### MM ##################
			# load the parameter saved on the .pqr file for the frame "fr" Fout(fr)
			txt=Fout"_com.pqr"; close(txt)
			n=0;
			while(getline < txt) { n++;
				type[n]=$3; res[n]=$4; resID[n]=$6;
				x[n]=$7;    y[n]=$8;   z[n]=$9
			}
			close(txt)

			for(i=1; i<=Npro; i++) { dEcou[resPro[i]]=0; dEvdw[resPro[i]]=0 }
			for(i=1; i<=Nlig; i++) { dEcou[resLig[i]]=0; dEvdw[resLig[i]]=0 }
			for(i=1; i<=Npro; i++) {
				ii=i+Ipro-1								# this make ii counting from the first index of the protein (Ipro)
				qi=Qatm[ii]; si=Satm[ii]; ei=Eatm[ii]					# charge, sigma ,epsilon
				xi=x[ii]; yi=y[ii]; zi=z[ii]						# x, y and z coordinates
				for(j=1; j<=Nlig; j++) {
					jj=j+Ilig-1							# this make ii counting from the first index of the ligand (Ilig)
					r=sqrt( (xi-x[jj])^2+(yi-y[jj])^2+(zi-z[jj])^2 )		# distance between xi(protein atom) and xj(ligand atom)
					if(ff=="OPLS") t=sqrt(si*Satm[jj]); else t=.5*(si+Satm[jj])
					t=(t/r)^6
					Ecou = qi*Qatm[jj]/r
					Evdw = 4*sqrt(ei*Eatm[jj])*t*(t-1)
					dEcou[resPro[i]] += Ecou; 					# all the j will be sum in the same entry (in case of multiple entries for resPro you will have a summed energy)
					dEcou[resLig[j]] += Ecou					# all the i will be sum in the same entry (in case of multiple entries for resLig you will have a summed energy)
					
					dEvdw[resPro[i]] += Evdw; 
					dEvdw[resLig[j]] += Evdw
				}
			}

			Ecou=0; Evdw=0
			for(i in dEcou) {
				dEcou[i] *= kJcou/(2*pdie); Ecou += dEcou[i];
				dEvdw[i] /= 2;              Evdw += dEvdw[i]
			}

			#### PBSA #################
			print "read\n" \
				"  mol pqr "Fout"_com.pqr\n" \
				"  mol pqr "Fout"_pro.pqr\n" \
				"  mol pqr "Fout"_lig.pqr\n" \
				"end\n\n" > Fout".apbs"

			if(meshType==0) { # GMXPBSA like
				print \
				dimAPBS(Fout"_com", 1, minX, maxX, minY, maxY, minZ, maxZ), \
				dimAPBS(Fout"_pro", 2, minX, maxX, minY, maxY, minZ, maxZ), \
				dimAPBS(Fout"_lig", 3, minX, maxX, minY, maxY, minZ, maxZ)  > Fout".apbs"
			} else if(meshType==1) { # g_mmpbsa like
				print \
				dimAPBS(Fout"_com", 1, minXcom[fr], maxXcom[fr], minYcom[fr], maxYcom[fr], minZcom[fr], maxZcom[fr]), \
				dimAPBS(Fout"_pro", 2, minXpro[fr], maxXpro[fr], minYpro[fr], maxYpro[fr], minZpro[fr], maxZpro[fr]), \
				dimAPBS(Fout"_lig", 3, minXlig[fr], maxXlig[fr], minYlig[fr], maxYlig[fr], minZlig[fr], maxZlig[fr])  > Fout".apbs"
			}

			cmd=apbs" "Fout".apbs > "Fout".out 2>&1";
			system(cmd); close(cmd)

			
			###### computing the APBS output values #########
			# Fout Ncom Npro Nlig resPRO resLIG Ipro Ilig
			txt=Fout".out";		# output file from apbs
			while(getline < txt ) {
				if(index($0, "CALCULATION #")) {		# index(s, t) Return the index of the string t in the string s, or 0 if t is not present.
					if(index($0, "("Fout"_com")) { t=1; n=Ncom }
					if(index($0, "("Fout"_pro")) { t=2; n=Npro }
					if(index($0, "("Fout"_lig")) { t=3; n=Nlig }
					if(index($0, "~VAC)")) t += 10
					if(index($0, "~SAS)")) t += 20
					while(getline < txt) {
						if(t<20 && index($0, "Per-atom energies:") \
						|| t>20 && index($0, "Solvent Accessible Surface Area")) break
					}

					for(i=1; i<=n; i++) {
						getline <txt;
						if(t<20) r=$3; else r=$NF
						if(t<10)       Esol[t%10, i]=r				# Esol[i, j] is the ij-element of a matrix. t%10 will be 1, 2 or 3
						else if(t<20)  Evac[t%10, i]=r
						else if(t<30)  Esas[t%10, i]=gamma*r+const/n
					}
				}
			}
			close(txt)

			PBcom=0; SAcom=0;
			PBpro=0; SApro=0;
			PBlig=0; SAlig=0;
			for(i=1; i<=Ncom; i++) { Esol[1,i] -= Evac[1,i]; PBcom += Esol[1,i]; SAcom += Esas[1,i] }
			for(i=1; i<=Npro; i++) { Esol[2,i] -= Evac[2,i]; PBpro += Esol[2,i]; SApro += Esas[2,i] }
			for(i=1; i<=Nlig; i++) { Esol[3,i] -= Evac[3,i]; PBlig += Esol[3,i]; SAlig += Esas[3,i] }

			for(i=1; i<=Npro; i++) { PBres[resPro[i]]=0; SAres[resPro[i]]=0 }
			for(i=1; i<=Nlig; i++) { PBres[resLig[i]]=0; SAres[resLig[i]]=0 }
			for(i=1; i<=Npro; i++) {
				PBres[resPro[i]] += Esol[1, Ipro+i-1]-Esol[2, i]
				SAres[resPro[i]] += Esas[1, Ipro+i-1]-Esas[2, i]
			}
			for(i=1; i<=Nlig; i++) {
				PBres[resLig[i]] += Esol[1, Ilig+i-1]-Esol[3, i]
				SAres[resLig[i]] += Esas[1, Ilig+i-1]-Esas[3, i]
			}
			
			#### Print the results ############
			printf "%-12s %9.3f %9.3f %9.3f %9.3f | %9.3f %9.3f | %12.3f %12.3f %12.3f | %9.3f %9.3f %9.3f\n", \
				Fout, Ecou+Evdw+PBcom-PBpro-PBlig+SAcom-SApro-SAlig, \
				Ecou+Evdw,  PBcom-PBpro-PBlig, SAcom-SApro-SAlig, \
				Ecou, Evdw, PBcom, PBpro, PBlig, SAcom, SApro, SAlig >> pid"~MMPBSA.dat"

			fmt="%s%12.3f%s"
			for(i=1; i<=Nres; i++) {
				ii="";  if(i==1) ii=sprintf("%-12s", Fout)
				txt=""; if(i==Nres) txt="\n"
				printf fmt, ii, dEcou[Tres[i]], txt                >> pid"~resMM_COU.dat"
				printf fmt, ii, dEvdw[Tres[i]], txt                >> pid"~resMM_VDW.dat"
				printf fmt, ii, PBres[Tres[i]], txt                >> pid"~resPBSA_PB.dat"
				printf fmt, ii, SAres[Tres[i]], txt                >> pid"~resPBSA_SA.dat"
				printf fmt, ii, dEcou[Tres[i]]+dEvdw[Tres[i]], txt >> pid"~resMM.dat"
				printf fmt, ii, PBres[Tres[i]]+SAres[Tres[i]], txt >> pid"~resPBSA.dat"
				printf fmt, ii, dEcou[Tres[i]]+dEvdw[Tres[i]] \
										+PBres[Tres[i]]+SAres[Tres[i]], txt >> pid"~res_MMPBSA.dat"
			}

			fmt="%s%6.1f%6.1f\n"
			for(i=1; i<=Npro; i++) {
				ii=Ipro+i-1
				txt=sprintf("%-6s%5d %-4s %3s A%4d    %8.3f%8.3f%8.3f", \
					"ATOM", ii, type[ii], res[ii], resID[ii], x[ii], y[ii], z[ii])
				printf fmt, txt, dEcou[resPro[i]], dEvdw[resPro[i]] > Fout"~COU+VDW.pdb"
				printf fmt, txt, PBres[resPro[i]], SAres[resPro[i]] > Fout"~PB+SA.pdb"
				printf fmt, txt, dEcou[resPro[i]]+dEvdw[resPro[i]], \
								 PBres[resPro[i]]+SAres[resPro[i]]  > Fout"~res_MM+PBSA.pdb"
				printf fmt, txt, 0, dEcou[resPro[i]]+dEvdw[resPro[i]]  \
								+PBres[resPro[i]]+SAres[resPro[i]]  > Fout"~res_MMPBSA.pdb"
			}
			for(i=1; i<=Nlig; i++) {
				ii=Ilig+i-1
				txt=sprintf("%-6s%5d %-4s %3s A%4d    %8.3f%8.3f%8.3f", \
					 "ATOM", ii, type[ii], res[ii], resID[ii], x[ii], y[ii], z[ii])
				printf fmt, txt, dEcou[resLig[i]], dEvdw[resLig[i]] > Fout"~COU+VDW.pdb"
				printf fmt, txt, PBres[resLig[i]], SAres[resLig[i]] > Fout"~PB+SA.pdb"
				printf fmt, txt, dEcou[resLig[i]]+dEvdw[resLig[i]], \
								 PBres[resLig[i]]+SAres[resLig[i]]  > Fout"~res_MM+PBSA.pdb"
				printf fmt, txt, 0, dEcou[resLig[i]]+dEvdw[resLig[i]]  \
								+PBres[resLig[i]]+SAres[resLig[i]]  > Fout"~res_MMPBSA.pdb"
			}
		}
	}

	function dimAPBS(file, Imol, minX, maxX, minY, maxY, minZ, maxZ) {

		lenX=max(maxX-minX, 0.1); cntX=(maxX+minX)/2
		lenY=max(maxY-minY, 0.1); cntY=(maxY+minY)/2
		lenZ=max(maxZ-minZ, 0.1); cntZ=(maxZ+minZ)/2
		cX  =lenX*cfac;           fX  =min(cX, lenX+fadd)
		cY  =lenY*cfac;           fY  =min(cY, lenY+fadd)
		cZ  =lenZ*cfac;           fZ  =min(cZ, lenZ+fadd)

		levN=4    # Classification
		t=2^(levN+1)
		nX=round(fX/df)-1; nX=max(t*round(nX/t)+1, 33)
		nY=round(fY/df)-1; nY=max(t*round(nY/t)+1, 33)
		nZ=round(fZ/df)-1; nZ=max(t*round(nZ/t)+1, 33)

		if(gridType==0) { # GMXPBSA method
			fpre=1; cfac=1.7
			fX=lenX+2*fadd; cX=fX*cfac; nX=t*(int(fX/(t*df))+1+fpre)+1
			fY=lenY+2*fadd; cY=fY*cfac; nY=t*(int(fY/(t*df))+1+fpre)+1
			fZ=lenZ+2*fadd; cZ=fZ*cfac; nZ=t*(int(fZ/(t*df))+1+fpre)+1
		}

		MGset="mg-auto"
		mem = 200*nX*nY*nZ/1024./1024. # MB

#		npX=nX; npY=nY; npZ=nZ
#		gmem=4000
#		ofrac=0.1
#		if(mem>=gmem) {
#			while(mem>gmem) {
#				maxN=max(npX, max(npY, npZ))
#					 if(maxN==npX) npX = t*((npX-1)/t-1)+1
#				else if(maxN==npY) npY = t*((npY-1)/t-1)+1
#				else if(maxN==npZ) npZ = t*((npZ-1)/t-1)+1
#				mem = 200*npX*npY*npZ/1024./1024
#			}

#			t=nX/npX; if(t>1) npX = int(t*(1+2*ofrac) + 1.0);
#			t=nY/npY; if(t>1) npY = int(t*(1+2*ofrac) + 1.0);
#			t=nZ/npZ; if(t>1) npZ = int(t*(1+2*ofrac) + 1.0);
#			MGset="mg-para\n  ofrac "ofrac"\n  pdime "npX" "npY" "npZ
#		}

		XYZset="  "MGset \
			"\n  mol "Imol \
			"\n  dime   "nX"  "nY"  "nZ"        # "mem" MB"  \
			"\n  cglen  "cX"  "cY"  "cZ"        # " \
			"\n  fglen  "fX"  "fY"  "fZ"        # " \
			"\n  fgcent "cntX"  "cntY"  "cntZ"  # " \
			"\n  cgcent "cntX"  "cntY"  "cntZ"  # "

		return \
			"ELEC name "file"\n" \
			XYZset "\n" \
			PBEset "\n" \
			"end\n\n" \
			"ELEC name "file"~VAC\n" \
			XYZset  "\n" \
			PBEset0 "\n" \
			"end\n\n" \
			"APOLAR name "file"~SAS\n" \
			"  mol "Imol"\n" \
			PBAset"\n" \
			"end\n\n" \
			"#print elecEnergy "file" - "file"~VAC end\n" \
			"#print apolEnergy "file"~SAS end\n\n"
	}
	function min(x, y) { return x<y ? x : y }
	function max(x, y) { return x>y ? x : y }
	function round(x)  { return int(x+0.5)  }
' _$pid.pdb
fi

################################################################################
# 4. 删除临时文件
# 4. remove intermediate files
################################################################################
#rm -f io.mc _$pid.pdb $scr $qrv \#_$pid*\#
date